openapi: 3.0.1
info:
  title: Kubernetes
  version: v1.29.6+aba1e8d
servers:
  - url: /
security:
  - BearerToken: []
paths:
  /apis/project.openshift.io/v1/projectrequests:
    post:
      tags:
        - project_openshift_io_v1
      description: create a ProjectRequest
      operationId: createProjectRequestOpenshiftIoV1Project
      parameters:
        - name: dryRun
          in: query
          description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
          schema:
            type: string
        - name: fieldManager
          in: query
          description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
          schema:
            type: string
        - name: pretty
          in: query
          description: "If 'true', then the output is pretty printed."
          schema:
            type: string
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/io.openshift.api.project.v1.ProjectRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.openshift.api.project.v1.Project"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.openshift.api.project.v1.Project"
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.openshift.api.project.v1.Project"
        "401":
          description: Unauthorized
          content: {}
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: project.openshift.io
        kind: Project
        version: v1
      x-codegen-request-body-name: body
      security:
        - BearerToken: []
  /apis/project.openshift.io/v1/projects/{name}:
    get:
      tags:
        - project_openshift_io_v1
      description: read the specified Project
      operationId: readProjectOpenshiftIoV1Project
      parameters:
        - name: name
          in: path
          description: name of the Project
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: "If 'true', then the output is pretty printed."
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.openshift.api.project.v1.Project"
        "401":
          description: Unauthorized
          content: {}
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: project.openshift.io
        kind: Project
        version: v1
      security:
        - BearerToken: []
  /api/v1/namespaces/{name}:
    patch:
      tags:
        - core_v1
      description: patch the specified Namespace
      operationId: patchCoreV1Namespace
      parameters:
        - name: name
          in: path
          description: name of the Namespace
          required: true
          schema:
            type: string
        - name: pretty
          in: query
          description: "If 'true', then the output is pretty printed."
          schema:
            type: string
        - name: dryRun
          in: query
          description: "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed"
          schema:
            type: string
        - name: fieldManager
          in: query
          description: "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint."
          schema:
            type: string
        - name: fieldValidation
          in: query
          description: "fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered."
          schema:
            type: string
        - name: force
          in: query
          description: "Force is going to \"force\" Apply requests. It means user will re-acquire fields owned by other people. Force flag must be unset for non-apply patch requests."
          schema:
            type: boolean
      requestBody:
        content:
          "application/merge-patch+json":
            schema:
              $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/io.k8s.api.core.v1.Namespace"
        "401":
          description: Unauthorized
          content: {}
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ""
        kind: Namespace
        version: v1
      x-codegen-request-body-name: body
      security:
        - BearerToken: []
components:
  schemas:
    io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
        labels:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        namespace:
          type: string
    io.k8s.apimachinery.pkg.apis.meta.v1.Patch:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    io.k8s.api.core.v1.Namespace:
      type: object
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        spec:
          $ref: "#/components/schemas/io.k8s.api.core.v1.NamespaceSpec"
        status:
          $ref: "#/components/schemas/io.k8s.api.core.v1.NamespaceStatus"
    io.k8s.api.core.v1.NamespaceSpec:
      type: object
      properties:
        finalizers:
          type: array
          items:
            type: string
    io.k8s.api.core.v1.NamespaceStatus:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/io.k8s.api.core.v1.NamespaceCondition"
        phase:
          type: string
    io.k8s.api.core.v1.NamespaceCondition:
      type: object
      properties:
        lastTransitionTime:
          type: string
          format: date-time
        message:
          type: string
        reason:
          type: string
        status:
          type: string
        type:
          type: string
      required:
        - type
        - status
    io.openshift.api.project.v1.ProjectRequest:
      type: object
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        description:
          type: string
        displayName:
          type: string
        spec:
          $ref: "#/components/schemas/io.openshift.api.project.v1.ProjectSpec"
    io.openshift.api.project.v1.Project:
      type: object
      properties:
        apiVersion:
          type: string
        kind:
          type: string
        metadata:
          $ref: "#/components/schemas/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
        spec:
          $ref: "#/components/schemas/io.openshift.api.project.v1.ProjectSpec"
        status:
          $ref: "#/components/schemas/io.openshift.api.project.v1.ProjectStatus"
    io.openshift.api.project.v1.ProjectSpec:
      type: object
      properties:
        finalizers:
          type: array
          items:
            type: string
    io.openshift.api.project.v1.ProjectStatus:
      type: object
      properties:
        phase:
          type: string
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT 